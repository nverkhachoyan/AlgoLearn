// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package gen

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        username,
        email,
        role,
        password_hash,
        oauth_id,
        first_name,
        last_name,
        profile_picture_url,
        bio,
        location
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10
    ) RETURNING id, created_at, updated_at, username, email, oauth_id, role, password_hash, first_name, last_name, profile_picture_url, last_login_at, is_active, is_email_verified, bio, location, cpus, streak, last_streak_date, folder_object_key, img_key, media_ext
`

type CreateUserParams struct {
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	Role              UserRole       `json:"role"`
	PasswordHash      string         `json:"passwordHash"`
	OauthID           sql.NullString `json:"oauthId"`
	FirstName         sql.NullString `json:"firstName"`
	LastName          sql.NullString `json:"lastName"`
	ProfilePictureUrl sql.NullString `json:"profilePictureUrl"`
	Bio               sql.NullString `json:"bio"`
	Location          sql.NullString `json:"location"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Role,
		arg.PasswordHash,
		arg.OauthID,
		arg.FirstName,
		arg.LastName,
		arg.ProfilePictureUrl,
		arg.Bio,
		arg.Location,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.OauthID,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePictureUrl,
		&i.LastLoginAt,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.Bio,
		&i.Location,
		&i.Cpus,
		&i.Streak,
		&i.LastStreakDate,
		&i.FolderObjectKey,
		&i.ImgKey,
		&i.MediaExt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getReceivedAchievementsCount = `-- name: GetReceivedAchievementsCount :one
SELECT COUNT(*) FROM user_achievements
`

func (q *Queries) GetReceivedAchievementsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getReceivedAchievementsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTopUsersByStreak = `-- name: GetTopUsersByStreak :many
SELECT 
    id, 
    username, 
    profile_picture_url, 
    streak,
    cpus
FROM users
WHERE is_active = true
ORDER BY streak DESC, cpus DESC
LIMIT $1
`

type GetTopUsersByStreakRow struct {
	ID                int32          `json:"id"`
	Username          string         `json:"username"`
	ProfilePictureUrl sql.NullString `json:"profilePictureUrl"`
	Streak            int32          `json:"streak"`
	Cpus              int32          `json:"cpus"`
}

func (q *Queries) GetTopUsersByStreak(ctx context.Context, limit int32) ([]GetTopUsersByStreakRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopUsersByStreak, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTopUsersByStreakRow{}
	for rows.Next() {
		var i GetTopUsersByStreakRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.ProfilePictureUrl,
			&i.Streak,
			&i.Cpus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, username, email, oauth_id, role, password_hash, first_name, last_name, profile_picture_url, last_login_at, is_active, is_email_verified, bio, location, cpus, streak, last_streak_date, folder_object_key, img_key, media_ext, user_id, theme, language, timezone
FROM users
    LEFT JOIN user_preferences ON users.id = user_preferences.user_id
WHERE
    email = $1
LIMIT 1
`

type GetUserByEmailRow struct {
	ID                int32          `json:"id"`
	CreatedAt         time.Time      `json:"createdAt"`
	UpdatedAt         time.Time      `json:"updatedAt"`
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	OauthID           sql.NullString `json:"oauthId"`
	Role              UserRole       `json:"role"`
	PasswordHash      string         `json:"passwordHash"`
	FirstName         sql.NullString `json:"firstName"`
	LastName          sql.NullString `json:"lastName"`
	ProfilePictureUrl sql.NullString `json:"profilePictureUrl"`
	LastLoginAt       sql.NullTime   `json:"lastLoginAt"`
	IsActive          bool           `json:"isActive"`
	IsEmailVerified   bool           `json:"isEmailVerified"`
	Bio               sql.NullString `json:"bio"`
	Location          sql.NullString `json:"location"`
	Cpus              int32          `json:"cpus"`
	Streak            int32          `json:"streak"`
	LastStreakDate    sql.NullTime   `json:"lastStreakDate"`
	FolderObjectKey   uuid.NullUUID  `json:"folderObjectKey"`
	ImgKey            uuid.NullUUID  `json:"imgKey"`
	MediaExt          sql.NullString `json:"mediaExt"`
	UserID            sql.NullInt32  `json:"userId"`
	Theme             sql.NullString `json:"theme"`
	Language          sql.NullString `json:"language"`
	Timezone          sql.NullString `json:"timezone"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.OauthID,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePictureUrl,
		&i.LastLoginAt,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.Bio,
		&i.Location,
		&i.Cpus,
		&i.Streak,
		&i.LastStreakDate,
		&i.FolderObjectKey,
		&i.ImgKey,
		&i.MediaExt,
		&i.UserID,
		&i.Theme,
		&i.Language,
		&i.Timezone,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, username, email, oauth_id, role, password_hash, first_name, last_name, profile_picture_url, last_login_at, is_active, is_email_verified, bio, location, cpus, streak, last_streak_date, folder_object_key, img_key, media_ext, user_id, theme, language, timezone
FROM users
    LEFT JOIN user_preferences ON users.id = user_preferences.user_id
WHERE
    id = $1
LIMIT 1
`

type GetUserByIDRow struct {
	ID                int32          `json:"id"`
	CreatedAt         time.Time      `json:"createdAt"`
	UpdatedAt         time.Time      `json:"updatedAt"`
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	OauthID           sql.NullString `json:"oauthId"`
	Role              UserRole       `json:"role"`
	PasswordHash      string         `json:"passwordHash"`
	FirstName         sql.NullString `json:"firstName"`
	LastName          sql.NullString `json:"lastName"`
	ProfilePictureUrl sql.NullString `json:"profilePictureUrl"`
	LastLoginAt       sql.NullTime   `json:"lastLoginAt"`
	IsActive          bool           `json:"isActive"`
	IsEmailVerified   bool           `json:"isEmailVerified"`
	Bio               sql.NullString `json:"bio"`
	Location          sql.NullString `json:"location"`
	Cpus              int32          `json:"cpus"`
	Streak            int32          `json:"streak"`
	LastStreakDate    sql.NullTime   `json:"lastStreakDate"`
	FolderObjectKey   uuid.NullUUID  `json:"folderObjectKey"`
	ImgKey            uuid.NullUUID  `json:"imgKey"`
	MediaExt          sql.NullString `json:"mediaExt"`
	UserID            sql.NullInt32  `json:"userId"`
	Theme             sql.NullString `json:"theme"`
	Language          sql.NullString `json:"language"`
	Timezone          sql.NullString `json:"timezone"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.OauthID,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePictureUrl,
		&i.LastLoginAt,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.Bio,
		&i.Location,
		&i.Cpus,
		&i.Streak,
		&i.LastStreakDate,
		&i.FolderObjectKey,
		&i.ImgKey,
		&i.MediaExt,
		&i.UserID,
		&i.Theme,
		&i.Language,
		&i.Timezone,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT 
    id, 
    username, 
    email, 
    role, 
    first_name, 
    last_name, 
    profile_picture_url, 
    bio, 
    location, 
    created_at, 
    updated_at,
    last_login_at,
    is_active,
    is_email_verified,
    cpus,
    streak,
    last_streak_date,
    folder_object_key,
    img_key
FROM users
WHERE 1=1
    AND ($1::text IS NULL OR role = $1::user_role)
    AND ($2::text IS NULL OR username ILIKE '%' || $2::text || '%')
    AND ($3::text IS NULL OR email ILIKE '%' || $3::text || '%')
    AND ($4::text IS NULL OR first_name ILIKE '%' || $4::text || '%')
    AND ($5::text IS NULL OR last_name ILIKE '%' || $5::text || '%')
    AND ($6::text IS NULL OR location ILIKE '%' || $6::text || '%')
    AND ($7::text IS NULL OR bio ILIKE '%' || $7::text || '%')
    AND ($8::int IS NULL OR cpus >= $8::int)
    AND ($9::int IS NULL OR cpus <= $9::int)
    AND ($10::int IS NULL OR streak >= $10::int)
    AND ($11::int IS NULL OR streak <= $11::int)
    AND ($12::boolean IS NULL OR is_active = $12::boolean)
    AND ($13::boolean IS NULL OR is_email_verified = $13::boolean)
    AND ($14::timestamp IS NULL OR created_at >= $14::timestamp)
    AND ($15::timestamp IS NULL OR created_at <= $15::timestamp)
    AND ($16::timestamp IS NULL OR updated_at >= $16::timestamp)
    AND ($17::timestamp IS NULL OR updated_at <= $17::timestamp)
    AND ($18::timestamp IS NULL OR last_login_at >= $18::timestamp)
    AND ($19::timestamp IS NULL OR last_login_at <= $19::timestamp)
    AND ($20::timestamp IS NULL OR last_streak_date >= $20::timestamp)
    AND ($21::timestamp IS NULL OR last_streak_date <= $21::timestamp)
ORDER BY 
    CASE WHEN $22::text = 'id' AND LOWER($23::text) = 'desc' THEN id END DESC,
    CASE WHEN $22::text = 'id' AND LOWER($23::text) = 'asc' THEN id END ASC,
    CASE WHEN $22::text = 'username' AND LOWER($23::text) = 'desc' THEN username END DESC,
    CASE WHEN $22::text = 'username' AND LOWER($23::text) = 'asc' THEN username END ASC,
    CASE WHEN $22::text = 'email' AND LOWER($23::text) = 'desc' THEN email END DESC,
    CASE WHEN $22::text = 'email' AND LOWER($23::text) = 'asc' THEN email END ASC,
    CASE WHEN $22::text = 'role' AND LOWER($23::text) = 'desc' THEN role::text END DESC NULLS LAST,
    CASE WHEN $22::text = 'role' AND LOWER($23::text) = 'asc' THEN role::text END ASC NULLS LAST,
    CASE WHEN $22::text = 'first_name' AND LOWER($23::text) = 'desc' THEN first_name END DESC NULLS LAST,
    CASE WHEN $22::text = 'first_name' AND LOWER($23::text) = 'asc' THEN first_name END ASC NULLS LAST,
    CASE WHEN $22::text = 'last_name' AND LOWER($23::text) = 'desc' THEN last_name END DESC NULLS LAST,
    CASE WHEN $22::text = 'last_name' AND LOWER($23::text) = 'asc' THEN last_name END ASC NULLS LAST,
    CASE WHEN $22::text = 'location' AND LOWER($23::text) = 'desc' THEN location END DESC NULLS LAST,
    CASE WHEN $22::text = 'location' AND LOWER($23::text) = 'asc' THEN location END ASC NULLS LAST,
    CASE WHEN $22::text = 'cpus' AND LOWER($23::text) = 'desc' THEN cpus END DESC,
    CASE WHEN $22::text = 'cpus' AND LOWER($23::text) = 'asc' THEN cpus END ASC,
    CASE WHEN $22::text = 'streak' AND LOWER($23::text) = 'desc' THEN streak END DESC,
    CASE WHEN $22::text = 'streak' AND LOWER($23::text) = 'asc' THEN streak END ASC,
    CASE WHEN $22::text = 'created_at' AND LOWER($23::text) = 'desc' THEN created_at END DESC,
    CASE WHEN $22::text = 'created_at' AND LOWER($23::text) = 'asc' THEN created_at END ASC,
    CASE WHEN $22::text = 'updated_at' AND LOWER($23::text) = 'desc' THEN updated_at END DESC,
    CASE WHEN $22::text = 'updated_at' AND LOWER($23::text) = 'asc' THEN updated_at END ASC,
    CASE WHEN $22::text = 'last_login_at' AND LOWER($23::text) = 'desc' THEN last_login_at END DESC NULLS LAST,
    CASE WHEN $22::text = 'last_login_at' AND LOWER($23::text) = 'asc' THEN last_login_at END ASC NULLS LAST,
    CASE WHEN $22::text = 'last_streak_date' AND LOWER($23::text) = 'desc' THEN last_streak_date END DESC NULLS LAST,
    CASE WHEN $22::text = 'last_streak_date' AND LOWER($23::text) = 'asc' THEN last_streak_date END ASC NULLS LAST,
    created_at DESC
LIMIT $25::int
OFFSET $24::int
`

type GetUsersParams struct {
	Role             sql.NullString `json:"role"`
	Username         sql.NullString `json:"username"`
	Email            sql.NullString `json:"email"`
	FirstName        sql.NullString `json:"firstName"`
	LastName         sql.NullString `json:"lastName"`
	Location         sql.NullString `json:"location"`
	Bio              sql.NullString `json:"bio"`
	MinCpus          sql.NullInt32  `json:"minCpus"`
	MaxCpus          sql.NullInt32  `json:"maxCpus"`
	MinStreak        sql.NullInt32  `json:"minStreak"`
	MaxStreak        sql.NullInt32  `json:"maxStreak"`
	IsActive         sql.NullBool   `json:"isActive"`
	IsEmailVerified  sql.NullBool   `json:"isEmailVerified"`
	CreatedAfter     sql.NullTime   `json:"createdAfter"`
	CreatedBefore    sql.NullTime   `json:"createdBefore"`
	UpdatedAfter     sql.NullTime   `json:"updatedAfter"`
	UpdatedBefore    sql.NullTime   `json:"updatedBefore"`
	LastLoginAfter   sql.NullTime   `json:"lastLoginAfter"`
	LastLoginBefore  sql.NullTime   `json:"lastLoginBefore"`
	LastStreakAfter  sql.NullTime   `json:"lastStreakAfter"`
	LastStreakBefore sql.NullTime   `json:"lastStreakBefore"`
	SortColumn       sql.NullString `json:"sortColumn"`
	SortDirection    sql.NullString `json:"sortDirection"`
	PageOffset       int32          `json:"pageOffset"`
	PageLimit        int32          `json:"pageLimit"`
}

type GetUsersRow struct {
	ID                int32          `json:"id"`
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	Role              UserRole       `json:"role"`
	FirstName         sql.NullString `json:"firstName"`
	LastName          sql.NullString `json:"lastName"`
	ProfilePictureUrl sql.NullString `json:"profilePictureUrl"`
	Bio               sql.NullString `json:"bio"`
	Location          sql.NullString `json:"location"`
	CreatedAt         time.Time      `json:"createdAt"`
	UpdatedAt         time.Time      `json:"updatedAt"`
	LastLoginAt       sql.NullTime   `json:"lastLoginAt"`
	IsActive          bool           `json:"isActive"`
	IsEmailVerified   bool           `json:"isEmailVerified"`
	Cpus              int32          `json:"cpus"`
	Streak            int32          `json:"streak"`
	LastStreakDate    sql.NullTime   `json:"lastStreakDate"`
	FolderObjectKey   uuid.NullUUID  `json:"folderObjectKey"`
	ImgKey            uuid.NullUUID  `json:"imgKey"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers,
		arg.Role,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Location,
		arg.Bio,
		arg.MinCpus,
		arg.MaxCpus,
		arg.MinStreak,
		arg.MaxStreak,
		arg.IsActive,
		arg.IsEmailVerified,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		arg.LastLoginAfter,
		arg.LastLoginBefore,
		arg.LastStreakAfter,
		arg.LastStreakBefore,
		arg.SortColumn,
		arg.SortDirection,
		arg.PageOffset,
		arg.PageLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Role,
			&i.FirstName,
			&i.LastName,
			&i.ProfilePictureUrl,
			&i.Bio,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLoginAt,
			&i.IsActive,
			&i.IsEmailVerified,
			&i.Cpus,
			&i.Streak,
			&i.LastStreakDate,
			&i.FolderObjectKey,
			&i.ImgKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT COUNT(*) FROM users
`

func (q *Queries) GetUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertUserPreferences = `-- name: InsertUserPreferences :one
INSERT INTO
    user_preferences (
        user_id,
        theme,
        language,
        timezone
    )
VALUES ($1, $2, $3, $4) RETURNING user_id, theme, language, timezone
`

type InsertUserPreferencesParams struct {
	UserID   int32  `json:"userId"`
	Theme    string `json:"theme"`
	Language string `json:"language"`
	Timezone string `json:"timezone"`
}

func (q *Queries) InsertUserPreferences(ctx context.Context, arg InsertUserPreferencesParams) (UserPreference, error) {
	row := q.db.QueryRowContext(ctx, insertUserPreferences,
		arg.UserID,
		arg.Theme,
		arg.Language,
		arg.Timezone,
	)
	var i UserPreference
	err := row.Scan(
		&i.UserID,
		&i.Theme,
		&i.Language,
		&i.Timezone,
	)
	return i, err
}

const resetUserStreaks = `-- name: ResetUserStreaks :exec
UPDATE users
SET streak = 0
WHERE last_streak_date < NOW() - INTERVAL '2 days'
`

func (q *Queries) ResetUserStreaks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUserStreaks)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = COALESCE(NULLIF($1::text, ''), username),
    email = COALESCE(NULLIF($2::text, ''), email),
    first_name = COALESCE(NULLIF($3::text, ''), first_name),
    last_name = COALESCE(NULLIF($4::text, ''), last_name),
    bio = COALESCE(NULLIF($5::text, ''), bio),
    location = COALESCE(NULLIF($6::text, ''), location),
    folder_object_key = COALESCE($7, folder_object_key),
    img_key = COALESCE($8, img_key),
    media_ext = COALESCE(NULLIF($9::text, ''), media_ext),
    updated_at = NOW()
WHERE id = $10
RETURNING id, created_at, updated_at, username, email, oauth_id, role, password_hash, first_name, last_name, profile_picture_url, last_login_at, is_active, is_email_verified, bio, location, cpus, streak, last_streak_date, folder_object_key, img_key, media_ext
`

type UpdateUserParams struct {
	Username        string        `json:"username"`
	Email           string        `json:"email"`
	FirstName       string        `json:"firstName"`
	LastName        string        `json:"lastName"`
	Bio             string        `json:"bio"`
	Location        string        `json:"location"`
	FolderObjectKey uuid.NullUUID `json:"folderObjectKey"`
	ImgKey          uuid.NullUUID `json:"imgKey"`
	MediaExt        string        `json:"mediaExt"`
	ID              int32         `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Bio,
		arg.Location,
		arg.FolderObjectKey,
		arg.ImgKey,
		arg.MediaExt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.OauthID,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePictureUrl,
		&i.LastLoginAt,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.Bio,
		&i.Location,
		&i.Cpus,
		&i.Streak,
		&i.LastStreakDate,
		&i.FolderObjectKey,
		&i.ImgKey,
		&i.MediaExt,
	)
	return i, err
}

const updateUserPreferences = `-- name: UpdateUserPreferences :one
UPDATE user_preferences
SET
    theme = COALESCE(NULLIF($1::text, ''), theme),
    lang = COALESCE(NULLIF($2::text, ''), lang),
    timezone = COALESCE(NULLIF($3::text, ''), timezone)
WHERE user_id = $4
RETURNING user_id, theme, language, timezone
`

type UpdateUserPreferencesParams struct {
	Theme    string `json:"theme"`
	Lang     string `json:"lang"`
	Timezone string `json:"timezone"`
	UserID   int32  `json:"userId"`
}

func (q *Queries) UpdateUserPreferences(ctx context.Context, arg UpdateUserPreferencesParams) (UserPreference, error) {
	row := q.db.QueryRowContext(ctx, updateUserPreferences,
		arg.Theme,
		arg.Lang,
		arg.Timezone,
		arg.UserID,
	)
	var i UserPreference
	err := row.Scan(
		&i.UserID,
		&i.Theme,
		&i.Language,
		&i.Timezone,
	)
	return i, err
}

const updateUserStreak = `-- name: UpdateUserStreak :one
UPDATE users
SET
    streak = $1::int,
    last_streak_date = $2::timestamptz
WHERE id = $3
RETURNING id, created_at, updated_at, username, email, oauth_id, role, password_hash, first_name, last_name, profile_picture_url, last_login_at, is_active, is_email_verified, bio, location, cpus, streak, last_streak_date, folder_object_key, img_key, media_ext
`

type UpdateUserStreakParams struct {
	Streak         int32     `json:"streak"`
	LastStreakDate time.Time `json:"lastStreakDate"`
	ID             int32     `json:"id"`
}

func (q *Queries) UpdateUserStreak(ctx context.Context, arg UpdateUserStreakParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserStreak, arg.Streak, arg.LastStreakDate, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.OauthID,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePictureUrl,
		&i.LastLoginAt,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.Bio,
		&i.Location,
		&i.Cpus,
		&i.Streak,
		&i.LastStreakDate,
		&i.FolderObjectKey,
		&i.ImgKey,
		&i.MediaExt,
	)
	return i, err
}
