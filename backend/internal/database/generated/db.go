// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createModuleStmt, err = db.PrepareContext(ctx, createModule); err != nil {
		return nil, fmt.Errorf("error preparing query CreateModule: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCourseStmt, err = db.PrepareContext(ctx, deleteCourse); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCourse: %w", err)
	}
	if q.deleteModuleStmt, err = db.PrepareContext(ctx, deleteModule); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteModule: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getCourseAuthorsStmt, err = db.PrepareContext(ctx, getCourseAuthors); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseAuthors: %w", err)
	}
	if q.getCourseByIDStmt, err = db.PrepareContext(ctx, getCourseByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseByID: %w", err)
	}
	if q.getCourseProgressFullBaseStmt, err = db.PrepareContext(ctx, getCourseProgressFullBase); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseProgressFullBase: %w", err)
	}
	if q.getCourseProgressSummaryBaseStmt, err = db.PrepareContext(ctx, getCourseProgressSummaryBase); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseProgressSummaryBase: %w", err)
	}
	if q.getCourseTagsStmt, err = db.PrepareContext(ctx, getCourseTags); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseTags: %w", err)
	}
	if q.getCourseUnitsStmt, err = db.PrepareContext(ctx, getCourseUnits); err != nil {
		return nil, fmt.Errorf("error preparing query GetCourseUnits: %w", err)
	}
	if q.getCoursesProgressSummaryStmt, err = db.PrepareContext(ctx, getCoursesProgressSummary); err != nil {
		return nil, fmt.Errorf("error preparing query GetCoursesProgressSummary: %w", err)
	}
	if q.getModuleProgressStmt, err = db.PrepareContext(ctx, getModuleProgress); err != nil {
		return nil, fmt.Errorf("error preparing query GetModuleProgress: %w", err)
	}
	if q.getModuleProgressByUnitStmt, err = db.PrepareContext(ctx, getModuleProgressByUnit); err != nil {
		return nil, fmt.Errorf("error preparing query GetModuleProgressByUnit: %w", err)
	}
	if q.getModuleProgressWithSectionsStmt, err = db.PrepareContext(ctx, getModuleProgressWithSections); err != nil {
		return nil, fmt.Errorf("error preparing query GetModuleProgressWithSections: %w", err)
	}
	if q.getModuleSectionsStmt, err = db.PrepareContext(ctx, getModuleSections); err != nil {
		return nil, fmt.Errorf("error preparing query GetModuleSections: %w", err)
	}
	if q.getModuleSectionsWithProgressStmt, err = db.PrepareContext(ctx, getModuleSectionsWithProgress); err != nil {
		return nil, fmt.Errorf("error preparing query GetModuleSectionsWithProgress: %w", err)
	}
	if q.getModuleTotalCountStmt, err = db.PrepareContext(ctx, getModuleTotalCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetModuleTotalCount: %w", err)
	}
	if q.getModuleWithProgressStmt, err = db.PrepareContext(ctx, getModuleWithProgress); err != nil {
		return nil, fmt.Errorf("error preparing query GetModuleWithProgress: %w", err)
	}
	if q.getModulesWithProgressStmt, err = db.PrepareContext(ctx, getModulesWithProgress); err != nil {
		return nil, fmt.Errorf("error preparing query GetModulesWithProgress: %w", err)
	}
	if q.getQuestionOptionsStmt, err = db.PrepareContext(ctx, getQuestionOptions); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuestionOptions: %w", err)
	}
	if q.getQuestionSectionStmt, err = db.PrepareContext(ctx, getQuestionSection); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuestionSection: %w", err)
	}
	if q.getQuestionSectionContentStmt, err = db.PrepareContext(ctx, getQuestionSectionContent); err != nil {
		return nil, fmt.Errorf("error preparing query GetQuestionSectionContent: %w", err)
	}
	if q.getSectionContentStmt, err = db.PrepareContext(ctx, getSectionContent); err != nil {
		return nil, fmt.Errorf("error preparing query GetSectionContent: %w", err)
	}
	if q.getTextSectionStmt, err = db.PrepareContext(ctx, getTextSection); err != nil {
		return nil, fmt.Errorf("error preparing query GetTextSection: %w", err)
	}
	if q.getTextSectionContentStmt, err = db.PrepareContext(ctx, getTextSectionContent); err != nil {
		return nil, fmt.Errorf("error preparing query GetTextSectionContent: %w", err)
	}
	if q.getUnitModulesStmt, err = db.PrepareContext(ctx, getUnitModules); err != nil {
		return nil, fmt.Errorf("error preparing query GetUnitModules: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserCourseProgressStmt, err = db.PrepareContext(ctx, getUserCourseProgress); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserCourseProgress: %w", err)
	}
	if q.getUserQuestionAnswerStmt, err = db.PrepareContext(ctx, getUserQuestionAnswer); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserQuestionAnswer: %w", err)
	}
	if q.getVideoSectionStmt, err = db.PrepareContext(ctx, getVideoSection); err != nil {
		return nil, fmt.Errorf("error preparing query GetVideoSection: %w", err)
	}
	if q.getVideoSectionContentStmt, err = db.PrepareContext(ctx, getVideoSectionContent); err != nil {
		return nil, fmt.Errorf("error preparing query GetVideoSectionContent: %w", err)
	}
	if q.insertUserPreferencesStmt, err = db.PrepareContext(ctx, insertUserPreferences); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUserPreferences: %w", err)
	}
	if q.saveModuleProgressStmt, err = db.PrepareContext(ctx, saveModuleProgress); err != nil {
		return nil, fmt.Errorf("error preparing query SaveModuleProgress: %w", err)
	}
	if q.updateModuleStmt, err = db.PrepareContext(ctx, updateModule); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateModule: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserPreferencesStmt, err = db.PrepareContext(ctx, updateUserPreferences); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPreferences: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createModuleStmt != nil {
		if cerr := q.createModuleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createModuleStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCourseStmt != nil {
		if cerr := q.deleteCourseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCourseStmt: %w", cerr)
		}
	}
	if q.deleteModuleStmt != nil {
		if cerr := q.deleteModuleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteModuleStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getCourseAuthorsStmt != nil {
		if cerr := q.getCourseAuthorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseAuthorsStmt: %w", cerr)
		}
	}
	if q.getCourseByIDStmt != nil {
		if cerr := q.getCourseByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseByIDStmt: %w", cerr)
		}
	}
	if q.getCourseProgressFullBaseStmt != nil {
		if cerr := q.getCourseProgressFullBaseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseProgressFullBaseStmt: %w", cerr)
		}
	}
	if q.getCourseProgressSummaryBaseStmt != nil {
		if cerr := q.getCourseProgressSummaryBaseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseProgressSummaryBaseStmt: %w", cerr)
		}
	}
	if q.getCourseTagsStmt != nil {
		if cerr := q.getCourseTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseTagsStmt: %w", cerr)
		}
	}
	if q.getCourseUnitsStmt != nil {
		if cerr := q.getCourseUnitsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCourseUnitsStmt: %w", cerr)
		}
	}
	if q.getCoursesProgressSummaryStmt != nil {
		if cerr := q.getCoursesProgressSummaryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCoursesProgressSummaryStmt: %w", cerr)
		}
	}
	if q.getModuleProgressStmt != nil {
		if cerr := q.getModuleProgressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getModuleProgressStmt: %w", cerr)
		}
	}
	if q.getModuleProgressByUnitStmt != nil {
		if cerr := q.getModuleProgressByUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getModuleProgressByUnitStmt: %w", cerr)
		}
	}
	if q.getModuleProgressWithSectionsStmt != nil {
		if cerr := q.getModuleProgressWithSectionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getModuleProgressWithSectionsStmt: %w", cerr)
		}
	}
	if q.getModuleSectionsStmt != nil {
		if cerr := q.getModuleSectionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getModuleSectionsStmt: %w", cerr)
		}
	}
	if q.getModuleSectionsWithProgressStmt != nil {
		if cerr := q.getModuleSectionsWithProgressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getModuleSectionsWithProgressStmt: %w", cerr)
		}
	}
	if q.getModuleTotalCountStmt != nil {
		if cerr := q.getModuleTotalCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getModuleTotalCountStmt: %w", cerr)
		}
	}
	if q.getModuleWithProgressStmt != nil {
		if cerr := q.getModuleWithProgressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getModuleWithProgressStmt: %w", cerr)
		}
	}
	if q.getModulesWithProgressStmt != nil {
		if cerr := q.getModulesWithProgressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getModulesWithProgressStmt: %w", cerr)
		}
	}
	if q.getQuestionOptionsStmt != nil {
		if cerr := q.getQuestionOptionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuestionOptionsStmt: %w", cerr)
		}
	}
	if q.getQuestionSectionStmt != nil {
		if cerr := q.getQuestionSectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuestionSectionStmt: %w", cerr)
		}
	}
	if q.getQuestionSectionContentStmt != nil {
		if cerr := q.getQuestionSectionContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQuestionSectionContentStmt: %w", cerr)
		}
	}
	if q.getSectionContentStmt != nil {
		if cerr := q.getSectionContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSectionContentStmt: %w", cerr)
		}
	}
	if q.getTextSectionStmt != nil {
		if cerr := q.getTextSectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTextSectionStmt: %w", cerr)
		}
	}
	if q.getTextSectionContentStmt != nil {
		if cerr := q.getTextSectionContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTextSectionContentStmt: %w", cerr)
		}
	}
	if q.getUnitModulesStmt != nil {
		if cerr := q.getUnitModulesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUnitModulesStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserCourseProgressStmt != nil {
		if cerr := q.getUserCourseProgressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserCourseProgressStmt: %w", cerr)
		}
	}
	if q.getUserQuestionAnswerStmt != nil {
		if cerr := q.getUserQuestionAnswerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserQuestionAnswerStmt: %w", cerr)
		}
	}
	if q.getVideoSectionStmt != nil {
		if cerr := q.getVideoSectionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVideoSectionStmt: %w", cerr)
		}
	}
	if q.getVideoSectionContentStmt != nil {
		if cerr := q.getVideoSectionContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVideoSectionContentStmt: %w", cerr)
		}
	}
	if q.insertUserPreferencesStmt != nil {
		if cerr := q.insertUserPreferencesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserPreferencesStmt: %w", cerr)
		}
	}
	if q.saveModuleProgressStmt != nil {
		if cerr := q.saveModuleProgressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing saveModuleProgressStmt: %w", cerr)
		}
	}
	if q.updateModuleStmt != nil {
		if cerr := q.updateModuleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateModuleStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserPreferencesStmt != nil {
		if cerr := q.updateUserPreferencesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPreferencesStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                DBTX
	tx                                *sql.Tx
	createModuleStmt                  *sql.Stmt
	createUserStmt                    *sql.Stmt
	deleteCourseStmt                  *sql.Stmt
	deleteModuleStmt                  *sql.Stmt
	deleteUserStmt                    *sql.Stmt
	getCourseAuthorsStmt              *sql.Stmt
	getCourseByIDStmt                 *sql.Stmt
	getCourseProgressFullBaseStmt     *sql.Stmt
	getCourseProgressSummaryBaseStmt  *sql.Stmt
	getCourseTagsStmt                 *sql.Stmt
	getCourseUnitsStmt                *sql.Stmt
	getCoursesProgressSummaryStmt     *sql.Stmt
	getModuleProgressStmt             *sql.Stmt
	getModuleProgressByUnitStmt       *sql.Stmt
	getModuleProgressWithSectionsStmt *sql.Stmt
	getModuleSectionsStmt             *sql.Stmt
	getModuleSectionsWithProgressStmt *sql.Stmt
	getModuleTotalCountStmt           *sql.Stmt
	getModuleWithProgressStmt         *sql.Stmt
	getModulesWithProgressStmt        *sql.Stmt
	getQuestionOptionsStmt            *sql.Stmt
	getQuestionSectionStmt            *sql.Stmt
	getQuestionSectionContentStmt     *sql.Stmt
	getSectionContentStmt             *sql.Stmt
	getTextSectionStmt                *sql.Stmt
	getTextSectionContentStmt         *sql.Stmt
	getUnitModulesStmt                *sql.Stmt
	getUserByEmailStmt                *sql.Stmt
	getUserByIDStmt                   *sql.Stmt
	getUserCourseProgressStmt         *sql.Stmt
	getUserQuestionAnswerStmt         *sql.Stmt
	getVideoSectionStmt               *sql.Stmt
	getVideoSectionContentStmt        *sql.Stmt
	insertUserPreferencesStmt         *sql.Stmt
	saveModuleProgressStmt            *sql.Stmt
	updateModuleStmt                  *sql.Stmt
	updateUserStmt                    *sql.Stmt
	updateUserPreferencesStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                tx,
		tx:                                tx,
		createModuleStmt:                  q.createModuleStmt,
		createUserStmt:                    q.createUserStmt,
		deleteCourseStmt:                  q.deleteCourseStmt,
		deleteModuleStmt:                  q.deleteModuleStmt,
		deleteUserStmt:                    q.deleteUserStmt,
		getCourseAuthorsStmt:              q.getCourseAuthorsStmt,
		getCourseByIDStmt:                 q.getCourseByIDStmt,
		getCourseProgressFullBaseStmt:     q.getCourseProgressFullBaseStmt,
		getCourseProgressSummaryBaseStmt:  q.getCourseProgressSummaryBaseStmt,
		getCourseTagsStmt:                 q.getCourseTagsStmt,
		getCourseUnitsStmt:                q.getCourseUnitsStmt,
		getCoursesProgressSummaryStmt:     q.getCoursesProgressSummaryStmt,
		getModuleProgressStmt:             q.getModuleProgressStmt,
		getModuleProgressByUnitStmt:       q.getModuleProgressByUnitStmt,
		getModuleProgressWithSectionsStmt: q.getModuleProgressWithSectionsStmt,
		getModuleSectionsStmt:             q.getModuleSectionsStmt,
		getModuleSectionsWithProgressStmt: q.getModuleSectionsWithProgressStmt,
		getModuleTotalCountStmt:           q.getModuleTotalCountStmt,
		getModuleWithProgressStmt:         q.getModuleWithProgressStmt,
		getModulesWithProgressStmt:        q.getModulesWithProgressStmt,
		getQuestionOptionsStmt:            q.getQuestionOptionsStmt,
		getQuestionSectionStmt:            q.getQuestionSectionStmt,
		getQuestionSectionContentStmt:     q.getQuestionSectionContentStmt,
		getSectionContentStmt:             q.getSectionContentStmt,
		getTextSectionStmt:                q.getTextSectionStmt,
		getTextSectionContentStmt:         q.getTextSectionContentStmt,
		getUnitModulesStmt:                q.getUnitModulesStmt,
		getUserByEmailStmt:                q.getUserByEmailStmt,
		getUserByIDStmt:                   q.getUserByIDStmt,
		getUserCourseProgressStmt:         q.getUserCourseProgressStmt,
		getUserQuestionAnswerStmt:         q.getUserQuestionAnswerStmt,
		getVideoSectionStmt:               q.getVideoSectionStmt,
		getVideoSectionContentStmt:        q.getVideoSectionContentStmt,
		insertUserPreferencesStmt:         q.insertUserPreferencesStmt,
		saveModuleProgressStmt:            q.saveModuleProgressStmt,
		updateModuleStmt:                  q.updateModuleStmt,
		updateUserStmt:                    q.updateUserStmt,
		updateUserPreferencesStmt:         q.updateUserPreferencesStmt,
	}
}
