// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: units.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (
    course_id,
    unit_number,
    name,
    description,
    folder_object_key,
    img_key,
    media_ext
)
VALUES (
    $1::int,
    $2::int,
    $3::text,
    $4::text,
    COALESCE($5::UUID, NULL),
    COALESCE($6::UUID, NULL),
    COALESCE($7::text, '')
)
RETURNING id
`

type CreateUnitParams struct {
	CourseID        int32     `json:"courseId"`
	UnitNumber      int32     `json:"unitNumber"`
	Name            string    `json:"name"`
	Description     string    `json:"description"`
	FolderObjectKey uuid.UUID `json:"folderObjectKey"`
	ImgKey          uuid.UUID `json:"imgKey"`
	MediaExt        string    `json:"mediaExt"`
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUnit,
		arg.CourseID,
		arg.UnitNumber,
		arg.Name,
		arg.Description,
		arg.FolderObjectKey,
		arg.ImgKey,
		arg.MediaExt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUnit = `-- name: DeleteUnit :exec
DELETE FROM units
WHERE id = $1::int
`

func (q *Queries) DeleteUnit(ctx context.Context, unitID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUnit, unitID)
	return err
}

const getUnitByID = `-- name: GetUnitByID :one
SELECT id, created_at, updated_at, media_ext, draft, unit_number, course_id, name, description, folder_object_key, img_key FROM units
WHERE id = $1::int
`

func (q *Queries) GetUnitByID(ctx context.Context, unitID int32) (Unit, error) {
	row := q.db.QueryRowContext(ctx, getUnitByID, unitID)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MediaExt,
		&i.Draft,
		&i.UnitNumber,
		&i.CourseID,
		&i.Name,
		&i.Description,
		&i.FolderObjectKey,
		&i.ImgKey,
	)
	return i, err
}

const getUnitsByCourseID = `-- name: GetUnitsByCourseID :many
SELECT id, created_at, updated_at, media_ext, draft, unit_number, course_id, name, description, folder_object_key, img_key FROM units
WHERE course_id = $1::int
`

func (q *Queries) GetUnitsByCourseID(ctx context.Context, courseID int32) ([]Unit, error) {
	rows, err := q.db.QueryContext(ctx, getUnitsByCourseID, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Unit{}
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MediaExt,
			&i.Draft,
			&i.UnitNumber,
			&i.CourseID,
			&i.Name,
			&i.Description,
			&i.FolderObjectKey,
			&i.ImgKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnitsCount = `-- name: GetUnitsCount :one
SELECT COUNT(*) FROM units
`

func (q *Queries) GetUnitsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUnitsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateUnit = `-- name: UpdateUnit :exec
UPDATE units
SET name = $1::text,
    description = $2::text
WHERE id = $3::int
`

type UpdateUnitParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	UnitID      int32  `json:"unitId"`
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) error {
	_, err := q.db.ExecContext(ctx, updateUnit, arg.Name, arg.Description, arg.UnitID)
	return err
}

const updateUnitNumber = `-- name: UpdateUnitNumber :exec
UPDATE units
SET unit_number = $1::int
WHERE id = $2::int
`

type UpdateUnitNumberParams struct {
	UnitNumber int32 `json:"unitNumber"`
	UnitID     int32 `json:"unitId"`
}

func (q *Queries) UpdateUnitNumber(ctx context.Context, arg UpdateUnitNumberParams) error {
	_, err := q.db.ExecContext(ctx, updateUnitNumber, arg.UnitNumber, arg.UnitID)
	return err
}
