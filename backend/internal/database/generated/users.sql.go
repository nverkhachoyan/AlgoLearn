// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        username,
        email,
        role,
        password_hash,
        oauth_id,
        first_name,
        last_name,
        profile_picture_url,
        bio,
        location
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10
    ) RETURNING id, created_at, updated_at, username, email, oauth_id, role, password_hash, first_name, last_name, profile_picture_url, last_login_at, is_active, is_email_verified, bio, location, cpus
`

type CreateUserParams struct {
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	Role              UserRole       `json:"role"`
	PasswordHash      string         `json:"password_hash"`
	OauthID           sql.NullString `json:"oauth_id"`
	FirstName         sql.NullString `json:"first_name"`
	LastName          sql.NullString `json:"last_name"`
	ProfilePictureUrl sql.NullString `json:"profile_picture_url"`
	Bio               sql.NullString `json:"bio"`
	Location          sql.NullString `json:"location"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Username,
		arg.Email,
		arg.Role,
		arg.PasswordHash,
		arg.OauthID,
		arg.FirstName,
		arg.LastName,
		arg.ProfilePictureUrl,
		arg.Bio,
		arg.Location,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.OauthID,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePictureUrl,
		&i.LastLoginAt,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.Bio,
		&i.Location,
		&i.Cpus,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, username, email, oauth_id, role, password_hash, first_name, last_name, profile_picture_url, last_login_at, is_active, is_email_verified, bio, location, cpus, user_id, theme, language, timezone
FROM users
    LEFT JOIN user_preferences ON users.id = user_preferences.user_id
WHERE
    email = $1
LIMIT 1
`

type GetUserByEmailRow struct {
	ID                int32          `json:"id"`
	CreatedAt         time.Time      `json:"created_at"`
	UpdatedAt         time.Time      `json:"updated_at"`
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	OauthID           sql.NullString `json:"oauth_id"`
	Role              UserRole       `json:"role"`
	PasswordHash      string         `json:"password_hash"`
	FirstName         sql.NullString `json:"first_name"`
	LastName          sql.NullString `json:"last_name"`
	ProfilePictureUrl sql.NullString `json:"profile_picture_url"`
	LastLoginAt       sql.NullTime   `json:"last_login_at"`
	IsActive          bool           `json:"is_active"`
	IsEmailVerified   bool           `json:"is_email_verified"`
	Bio               sql.NullString `json:"bio"`
	Location          sql.NullString `json:"location"`
	Cpus              int32          `json:"cpus"`
	UserID            sql.NullInt32  `json:"user_id"`
	Theme             sql.NullString `json:"theme"`
	Language          sql.NullString `json:"language"`
	Timezone          sql.NullString `json:"timezone"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.OauthID,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePictureUrl,
		&i.LastLoginAt,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.Bio,
		&i.Location,
		&i.Cpus,
		&i.UserID,
		&i.Theme,
		&i.Language,
		&i.Timezone,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, username, email, oauth_id, role, password_hash, first_name, last_name, profile_picture_url, last_login_at, is_active, is_email_verified, bio, location, cpus, user_id, theme, language, timezone
FROM users
    LEFT JOIN user_preferences ON users.id = user_preferences.user_id
WHERE
    id = $1
LIMIT 1
`

type GetUserByIDRow struct {
	ID                int32          `json:"id"`
	CreatedAt         time.Time      `json:"created_at"`
	UpdatedAt         time.Time      `json:"updated_at"`
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	OauthID           sql.NullString `json:"oauth_id"`
	Role              UserRole       `json:"role"`
	PasswordHash      string         `json:"password_hash"`
	FirstName         sql.NullString `json:"first_name"`
	LastName          sql.NullString `json:"last_name"`
	ProfilePictureUrl sql.NullString `json:"profile_picture_url"`
	LastLoginAt       sql.NullTime   `json:"last_login_at"`
	IsActive          bool           `json:"is_active"`
	IsEmailVerified   bool           `json:"is_email_verified"`
	Bio               sql.NullString `json:"bio"`
	Location          sql.NullString `json:"location"`
	Cpus              int32          `json:"cpus"`
	UserID            sql.NullInt32  `json:"user_id"`
	Theme             sql.NullString `json:"theme"`
	Language          sql.NullString `json:"language"`
	Timezone          sql.NullString `json:"timezone"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.OauthID,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePictureUrl,
		&i.LastLoginAt,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.Bio,
		&i.Location,
		&i.Cpus,
		&i.UserID,
		&i.Theme,
		&i.Language,
		&i.Timezone,
	)
	return i, err
}

const insertUserPreferences = `-- name: InsertUserPreferences :one
INSERT INTO
    user_preferences (
        user_id,
        theme,
        language,
        timezone
    )
VALUES ($1, $2, $3, $4) RETURNING user_id, theme, language, timezone
`

type InsertUserPreferencesParams struct {
	UserID   int32  `json:"user_id"`
	Theme    string `json:"theme"`
	Language string `json:"language"`
	Timezone string `json:"timezone"`
}

func (q *Queries) InsertUserPreferences(ctx context.Context, arg InsertUserPreferencesParams) (UserPreference, error) {
	row := q.queryRow(ctx, q.insertUserPreferencesStmt, insertUserPreferences,
		arg.UserID,
		arg.Theme,
		arg.Language,
		arg.Timezone,
	)
	var i UserPreference
	err := row.Scan(
		&i.UserID,
		&i.Theme,
		&i.Language,
		&i.Timezone,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = COALESCE(NULLIF($1::text, ''), username),
    email = COALESCE(NULLIF($2::text, ''), email),
    first_name = COALESCE(NULLIF($3::text, ''), first_name),
    last_name = COALESCE(NULLIF($4::text, ''), last_name),
    profile_picture_url = COALESCE(NULLIF($5::text, ''), profile_picture_url),
    bio = COALESCE(NULLIF($6::text, ''), bio),
    location = COALESCE(NULLIF($7::text, ''), location),
    updated_at = NOW()
WHERE id = $8
RETURNING id, created_at, updated_at, username, email, oauth_id, role, password_hash, first_name, last_name, profile_picture_url, last_login_at, is_active, is_email_verified, bio, location, cpus
`

type UpdateUserParams struct {
	Username          string `json:"username"`
	Email             string `json:"email"`
	FirstName         string `json:"first_name"`
	LastName          string `json:"last_name"`
	ProfilePictureUrl string `json:"profile_picture_url"`
	Bio               string `json:"bio"`
	Location          string `json:"location"`
	ID                int32  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.ProfilePictureUrl,
		arg.Bio,
		arg.Location,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.OauthID,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePictureUrl,
		&i.LastLoginAt,
		&i.IsActive,
		&i.IsEmailVerified,
		&i.Bio,
		&i.Location,
		&i.Cpus,
	)
	return i, err
}

const updateUserPreferences = `-- name: UpdateUserPreferences :one
UPDATE user_preferences
SET
    theme = COALESCE(NULLIF($1::text, ''), theme),
    lang = COALESCE(NULLIF($2::text, ''), lang),
    timezone = COALESCE(NULLIF($3::text, ''), timezone)
WHERE user_id = $4
RETURNING user_id, theme, language, timezone
`

type UpdateUserPreferencesParams struct {
	Theme    string `json:"theme"`
	Lang     string `json:"lang"`
	Timezone string `json:"timezone"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) UpdateUserPreferences(ctx context.Context, arg UpdateUserPreferencesParams) (UserPreference, error) {
	row := q.queryRow(ctx, q.updateUserPreferencesStmt, updateUserPreferences,
		arg.Theme,
		arg.Lang,
		arg.Timezone,
		arg.UserID,
	)
	var i UserPreference
	err := row.Scan(
		&i.UserID,
		&i.Theme,
		&i.Language,
		&i.Timezone,
	)
	return i, err
}
