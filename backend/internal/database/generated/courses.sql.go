// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: courses.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
    name,
    description,
    requirements,
    what_you_learn,
    background_color,
    icon_url,
    duration,
    difficulty_level,
    rating
)
VALUES (
    $1::text,
    $2::text,
    $3::text,
    $4::text,
    $5::text,
    $6::text,
    $7::int,
    $8::difficulty_level,
    $9::float
)
RETURNING id
`

type CreateCourseParams struct {
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	Requirements    string          `json:"requirements"`
	WhatYouLearn    string          `json:"whatYouLearn"`
	BackgroundColor string          `json:"backgroundColor"`
	IconUrl         string          `json:"iconUrl"`
	Duration        int32           `json:"duration"`
	DifficultyLevel DifficultyLevel `json:"difficultyLevel"`
	Rating          float64         `json:"rating"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createCourse,
		arg.Name,
		arg.Description,
		arg.Requirements,
		arg.WhatYouLearn,
		arg.BackgroundColor,
		arg.IconUrl,
		arg.Duration,
		arg.DifficultyLevel,
		arg.Rating,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses WHERE id = $1::int
`

func (q *Queries) DeleteCourse(ctx context.Context, courseID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCourse, courseID)
	return err
}

const deleteModuleProgress = `-- name: DeleteModuleProgress :exec
WITH
    course_modules AS (
        SELECT m.id as module_id
        FROM modules m
            JOIN units u ON u.id = m.unit_id
        WHERE
            u.course_id = $2::int
    )
DELETE FROM user_module_progress
WHERE
    module_id IN (
        SELECT module_id
        FROM course_modules
    )
    AND (
        $1::int = 0
        OR user_id = $1::int
    )
`

type DeleteModuleProgressParams struct {
	UserID   int32 `json:"userId"`
	CourseID int32 `json:"courseId"`
}

func (q *Queries) DeleteModuleProgress(ctx context.Context, arg DeleteModuleProgressParams) error {
	_, err := q.db.ExecContext(ctx, deleteModuleProgress, arg.UserID, arg.CourseID)
	return err
}

const deleteSectionProgress = `-- name: DeleteSectionProgress :exec
WITH
    course_modules AS (
        SELECT m.id as module_id
        FROM modules m
            JOIN units u ON u.id = m.unit_id
        WHERE
            u.course_id = $2::int
    )
DELETE FROM user_section_progress
WHERE
    section_id IN (
        SELECT s.id
        FROM sections s
        WHERE
            s.module_id IN (
                SELECT module_id
                FROM course_modules
            )
    )
    AND (
        $1::int = 0
        OR user_id = $1::int
    )
`

type DeleteSectionProgressParams struct {
	UserID   int32 `json:"userId"`
	CourseID int32 `json:"courseId"`
}

func (q *Queries) DeleteSectionProgress(ctx context.Context, arg DeleteSectionProgressParams) error {
	_, err := q.db.ExecContext(ctx, deleteSectionProgress, arg.UserID, arg.CourseID)
	return err
}

const deleteUserCourse = `-- name: DeleteUserCourse :exec
DELETE FROM user_courses
WHERE user_id = $1::int
AND course_id = $2::int
`

type DeleteUserCourseParams struct {
	UserID   int32 `json:"userId"`
	CourseID int32 `json:"courseId"`
}

func (q *Queries) DeleteUserCourse(ctx context.Context, arg DeleteUserCourseParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserCourse, arg.UserID, arg.CourseID)
	return err
}

const getAllCoursesWithOptionalProgress = `-- name: GetAllCoursesWithOptionalProgress :many
WITH user_progress AS (
    SELECT
        uc.course_id,
        u.id as unit_id,
        u.created_at as unit_created_at,
        u.updated_at as unit_updated_at,
        u.unit_number,
        u.name as unit_name,
        u.description as unit_description,
        m.id as module_id,
        ump.created_at as module_created_at,
        ump.updated_at as module_updated_at,
        m.module_number,
        m.name as module_name,
        m.description as module_description,
        ump.progress as module_progress,
        ump.status as module_status
    FROM user_courses uc
             JOIN units u ON u.course_id = uc.course_id
             JOIN modules m ON m.unit_id = u.id
             LEFT JOIN user_module_progress ump ON ump.module_id = m.id
        AND ump.user_id = $3::int
    WHERE uc.user_id = $3::int
    ORDER BY ump.updated_at DESC NULLS LAST
)
SELECT
    c.id,
    c.created_at,
    c.updated_at,
    c.name,
    c.description,
    c.requirements,
    c.what_you_learn,
    c.background_color,
    c.icon_url,
    c.duration,
    c.difficulty_level,
    c.rating,
    up.unit_id as current_unit_id,
    up.unit_created_at,
    up.unit_updated_at,
    up.unit_number,
    up.unit_name,
    up.unit_description,
    up.module_id as current_module_id,
    up.module_created_at,
    up.module_updated_at,
    up.module_number,
    up.module_id as module_unit_id,
    up.module_name,
    up.module_description,
    COALESCE(up.module_progress, 0) as module_progress,
    COALESCE(up.module_status, 'uninitiated') as module_status,
   (SELECT COUNT(*) FROM courses) as total_count
FROM (
    SELECT id
    FROM courses
    ORDER BY id
    LIMIT $2::int
    OFFSET $1::int
) paginated_courses
JOIN courses c ON c.id = paginated_courses.id
         LEFT JOIN user_progress up ON up.course_id = c.id
ORDER BY
    CASE WHEN up.course_id IS NOT NULL THEN 0 ELSE 1 END,
    up.module_updated_at DESC NULLS LAST
`

type GetAllCoursesWithOptionalProgressParams struct {
	PageOffset int32 `json:"pageOffset"`
	PageLimit  int32 `json:"pageLimit"`
	UserID     int32 `json:"userId"`
}

type GetAllCoursesWithOptionalProgressRow struct {
	ID                int32                `json:"id"`
	CreatedAt         time.Time            `json:"createdAt"`
	UpdatedAt         time.Time            `json:"updatedAt"`
	Name              string               `json:"name"`
	Description       string               `json:"description"`
	Requirements      sql.NullString       `json:"requirements"`
	WhatYouLearn      sql.NullString       `json:"whatYouLearn"`
	BackgroundColor   sql.NullString       `json:"backgroundColor"`
	IconUrl           sql.NullString       `json:"iconUrl"`
	Duration          sql.NullInt32        `json:"duration"`
	DifficultyLevel   NullDifficultyLevel  `json:"difficultyLevel"`
	Rating            sql.NullFloat64      `json:"rating"`
	CurrentUnitID     sql.NullInt32        `json:"currentUnitId"`
	UnitCreatedAt     sql.NullTime         `json:"unitCreatedAt"`
	UnitUpdatedAt     sql.NullTime         `json:"unitUpdatedAt"`
	UnitNumber        sql.NullInt32        `json:"unitNumber"`
	UnitName          sql.NullString       `json:"unitName"`
	UnitDescription   sql.NullString       `json:"unitDescription"`
	CurrentModuleID   sql.NullInt32        `json:"currentModuleId"`
	ModuleCreatedAt   sql.NullTime         `json:"moduleCreatedAt"`
	ModuleUpdatedAt   sql.NullTime         `json:"moduleUpdatedAt"`
	ModuleNumber      sql.NullInt32        `json:"moduleNumber"`
	ModuleUnitID      sql.NullInt32        `json:"moduleUnitId"`
	ModuleName        sql.NullString       `json:"moduleName"`
	ModuleDescription sql.NullString       `json:"moduleDescription"`
	ModuleProgress    float64              `json:"moduleProgress"`
	ModuleStatus      ModuleProgressStatus `json:"moduleStatus"`
	TotalCount        int64                `json:"totalCount"`
}

func (q *Queries) GetAllCoursesWithOptionalProgress(ctx context.Context, arg GetAllCoursesWithOptionalProgressParams) ([]GetAllCoursesWithOptionalProgressRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCoursesWithOptionalProgress, arg.PageOffset, arg.PageLimit, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllCoursesWithOptionalProgressRow{}
	for rows.Next() {
		var i GetAllCoursesWithOptionalProgressRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Requirements,
			&i.WhatYouLearn,
			&i.BackgroundColor,
			&i.IconUrl,
			&i.Duration,
			&i.DifficultyLevel,
			&i.Rating,
			&i.CurrentUnitID,
			&i.UnitCreatedAt,
			&i.UnitUpdatedAt,
			&i.UnitNumber,
			&i.UnitName,
			&i.UnitDescription,
			&i.CurrentModuleID,
			&i.ModuleCreatedAt,
			&i.ModuleUpdatedAt,
			&i.ModuleNumber,
			&i.ModuleUnitID,
			&i.ModuleName,
			&i.ModuleDescription,
			&i.ModuleProgress,
			&i.ModuleStatus,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseAuthors = `-- name: GetCourseAuthors :many
SELECT u.id, u.first_name, u.last_name
FROM users u
    JOIN course_authors ca ON ca.user_id = u.id
WHERE
    ca.course_id = $1::int
`

type GetCourseAuthorsRow struct {
	ID        int32          `json:"id"`
	FirstName sql.NullString `json:"firstName"`
	LastName  sql.NullString `json:"lastName"`
}

func (q *Queries) GetCourseAuthors(ctx context.Context, courseID int32) ([]GetCourseAuthorsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCourseAuthors, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCourseAuthorsRow{}
	for rows.Next() {
		var i GetCourseAuthorsRow
		if err := rows.Scan(&i.ID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseByID = `-- name: GetCourseByID :one
SELECT
    id,
    created_at,
    updated_at,
    name,
    description,
    requirements,
    what_you_learn,
    background_color,
    icon_url,
    duration,
    difficulty_level,
    rating
FROM courses
WHERE
    id = $1::int
`

type GetCourseByIDRow struct {
	ID              int32               `json:"id"`
	CreatedAt       time.Time           `json:"createdAt"`
	UpdatedAt       time.Time           `json:"updatedAt"`
	Name            string              `json:"name"`
	Description     string              `json:"description"`
	Requirements    sql.NullString      `json:"requirements"`
	WhatYouLearn    sql.NullString      `json:"whatYouLearn"`
	BackgroundColor sql.NullString      `json:"backgroundColor"`
	IconUrl         sql.NullString      `json:"iconUrl"`
	Duration        sql.NullInt32       `json:"duration"`
	DifficultyLevel NullDifficultyLevel `json:"difficultyLevel"`
	Rating          sql.NullFloat64     `json:"rating"`
}

func (q *Queries) GetCourseByID(ctx context.Context, courseID int32) (GetCourseByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCourseByID, courseID)
	var i GetCourseByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Requirements,
		&i.WhatYouLearn,
		&i.BackgroundColor,
		&i.IconUrl,
		&i.Duration,
		&i.DifficultyLevel,
		&i.Rating,
	)
	return i, err
}

const getCourseProgressSummaryBase = `-- name: GetCourseProgressSummaryBase :one
WITH current_unit_id AS (
    SELECT COALESCE(u.id, 0) as id
    FROM units u
    WHERE u.course_id = $2::int
    ORDER BY u.updated_at DESC    
    LIMIT 1
),
current_module_id AS (
    SELECT COALESCE(m.id, 0) as id
    FROM modules m
    WHERE m.unit_id = (SELECT id FROM current_unit_id)
    ORDER BY m.updated_at DESC
    LIMIT 1
)
SELECT
    c.id,
    c.created_at,
    c.updated_at,
    c.name,
    c.description,
    c.requirements,
    c.what_you_learn,
    c.background_color,
    c.icon_url,
    c.difficulty_level,
    c.duration,
    c.rating,
    (SELECT id FROM current_unit_id),
    u.created_at as unit_created_at,
    u.updated_at as unit_updated_at,
    u.unit_number,
    u.name as unit_name,
    u.description as unit_description,
    (SELECT id FROM current_module_id),
    m.created_at as module_created_at,
    m.updated_at as module_updated_at,
    m.module_number,
    m.name as module_name,
    m.description as module_description,
    ump.progress as module_progress,
    ump.status as module_status
FROM
    courses c
    LEFT JOIN user_courses uc ON uc.course_id = c.id
    AND uc.user_id = $1::int
    LEFT JOIN units u ON u.id = (SELECT id FROM current_unit_id)
    LEFT JOIN modules m ON m.id = (SELECT id FROM current_module_id)
    LEFT JOIN user_module_progress ump ON ump.module_id = (SELECT id FROM current_module_id)
    AND ump.user_id = $1::int
WHERE
    c.id = $2::int
`

type GetCourseProgressSummaryBaseParams struct {
	UserID   int32 `json:"userId"`
	CourseID int32 `json:"courseId"`
}

type GetCourseProgressSummaryBaseRow struct {
	ID                int32                    `json:"id"`
	CreatedAt         time.Time                `json:"createdAt"`
	UpdatedAt         time.Time                `json:"updatedAt"`
	Name              string                   `json:"name"`
	Description       string                   `json:"description"`
	Requirements      sql.NullString           `json:"requirements"`
	WhatYouLearn      sql.NullString           `json:"whatYouLearn"`
	BackgroundColor   sql.NullString           `json:"backgroundColor"`
	IconUrl           sql.NullString           `json:"iconUrl"`
	DifficultyLevel   NullDifficultyLevel      `json:"difficultyLevel"`
	Duration          sql.NullInt32            `json:"duration"`
	Rating            sql.NullFloat64          `json:"rating"`
	ID_2              int32                    `json:"id2"`
	UnitCreatedAt     sql.NullTime             `json:"unitCreatedAt"`
	UnitUpdatedAt     sql.NullTime             `json:"unitUpdatedAt"`
	UnitNumber        sql.NullInt32            `json:"unitNumber"`
	UnitName          sql.NullString           `json:"unitName"`
	UnitDescription   sql.NullString           `json:"unitDescription"`
	ID_3              int32                    `json:"id3"`
	ModuleCreatedAt   sql.NullTime             `json:"moduleCreatedAt"`
	ModuleUpdatedAt   sql.NullTime             `json:"moduleUpdatedAt"`
	ModuleNumber      sql.NullInt32            `json:"moduleNumber"`
	ModuleName        sql.NullString           `json:"moduleName"`
	ModuleDescription sql.NullString           `json:"moduleDescription"`
	ModuleProgress    sql.NullFloat64          `json:"moduleProgress"`
	ModuleStatus      NullModuleProgressStatus `json:"moduleStatus"`
}

func (q *Queries) GetCourseProgressSummaryBase(ctx context.Context, arg GetCourseProgressSummaryBaseParams) (GetCourseProgressSummaryBaseRow, error) {
	row := q.db.QueryRowContext(ctx, getCourseProgressSummaryBase, arg.UserID, arg.CourseID)
	var i GetCourseProgressSummaryBaseRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Requirements,
		&i.WhatYouLearn,
		&i.BackgroundColor,
		&i.IconUrl,
		&i.DifficultyLevel,
		&i.Duration,
		&i.Rating,
		&i.ID_2,
		&i.UnitCreatedAt,
		&i.UnitUpdatedAt,
		&i.UnitNumber,
		&i.UnitName,
		&i.UnitDescription,
		&i.ID_3,
		&i.ModuleCreatedAt,
		&i.ModuleUpdatedAt,
		&i.ModuleNumber,
		&i.ModuleName,
		&i.ModuleDescription,
		&i.ModuleProgress,
		&i.ModuleStatus,
	)
	return i, err
}

const getCourseTags = `-- name: GetCourseTags :many
SELECT t.id, t.name
FROM tags t
    JOIN course_tags ct ON ct.tag_id = t.id
WHERE
    ct.course_id = $1::int
`

func (q *Queries) GetCourseTags(ctx context.Context, courseID int32) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getCourseTags, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseUnits = `-- name: GetCourseUnits :many
SELECT
    id,
    created_at,
    updated_at,
    unit_number,
    course_id,
    name,
    description
FROM units
WHERE
    course_id = $1::int
ORDER BY unit_number
`

type GetCourseUnitsRow struct {
	ID          int32     `json:"id"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
	UnitNumber  int32     `json:"unitNumber"`
	CourseID    int32     `json:"courseId"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) GetCourseUnits(ctx context.Context, courseID int32) ([]GetCourseUnitsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCourseUnits, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCourseUnitsRow{}
	for rows.Next() {
		var i GetCourseUnitsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UnitNumber,
			&i.CourseID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCoursesCount = `-- name: GetCoursesCount :one
SELECT COUNT(*) FROM courses
`

func (q *Queries) GetCoursesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCoursesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCurrentUnitAndModule = `-- name: GetCurrentUnitAndModule :one
WITH latest_module_progress AS (
    SELECT 
        ump.module_id,
        ump.updated_at
    FROM user_module_progress ump
    JOIN modules m ON m.id = ump.module_id
    JOIN units u ON u.id = m.unit_id
    WHERE ump.user_id = $1 
    AND u.course_id = $2
    ORDER BY ump.updated_at DESC NULLS LAST
    LIMIT 1
)
SELECT
    u.id as unit_id,
    u.created_at as unit_created_at,
    u.updated_at as unit_updated_at,
    u.name as unit_name,
    u.description as unit_description,
    u.unit_number as unit_number,
    m.id as module_id,
    m.created_at as module_created_at,
    m.updated_at as module_updated_at,
    m.name as module_name,
    m.description as module_description,
    m.module_number as module_number,
    COALESCE(ump.progress, 0) as module_progress,
    COALESCE(ump.status, 'uninitiated'::module_progress_status) as module_status
FROM latest_module_progress lmp
JOIN modules m ON m.id = lmp.module_id
JOIN units u ON u.id = m.unit_id
LEFT JOIN user_module_progress ump ON ump.module_id = m.id AND ump.user_id = $1
`

type GetCurrentUnitAndModuleParams struct {
	UserID   int32 `json:"userId"`
	CourseID int32 `json:"courseId"`
}

type GetCurrentUnitAndModuleRow struct {
	UnitID            int32                `json:"unitId"`
	UnitCreatedAt     time.Time            `json:"unitCreatedAt"`
	UnitUpdatedAt     time.Time            `json:"unitUpdatedAt"`
	UnitName          string               `json:"unitName"`
	UnitDescription   string               `json:"unitDescription"`
	UnitNumber        int32                `json:"unitNumber"`
	ModuleID          int32                `json:"moduleId"`
	ModuleCreatedAt   time.Time            `json:"moduleCreatedAt"`
	ModuleUpdatedAt   time.Time            `json:"moduleUpdatedAt"`
	ModuleName        string               `json:"moduleName"`
	ModuleDescription string               `json:"moduleDescription"`
	ModuleNumber      int32                `json:"moduleNumber"`
	ModuleProgress    float64              `json:"moduleProgress"`
	ModuleStatus      ModuleProgressStatus `json:"moduleStatus"`
}

func (q *Queries) GetCurrentUnitAndModule(ctx context.Context, arg GetCurrentUnitAndModuleParams) (GetCurrentUnitAndModuleRow, error) {
	row := q.db.QueryRowContext(ctx, getCurrentUnitAndModule, arg.UserID, arg.CourseID)
	var i GetCurrentUnitAndModuleRow
	err := row.Scan(
		&i.UnitID,
		&i.UnitCreatedAt,
		&i.UnitUpdatedAt,
		&i.UnitName,
		&i.UnitDescription,
		&i.UnitNumber,
		&i.ModuleID,
		&i.ModuleCreatedAt,
		&i.ModuleUpdatedAt,
		&i.ModuleName,
		&i.ModuleDescription,
		&i.ModuleNumber,
		&i.ModuleProgress,
		&i.ModuleStatus,
	)
	return i, err
}

const getEnrolledCoursesWithProgress = `-- name: GetEnrolledCoursesWithProgress :many
WITH enrolled_count AS (
    SELECT COUNT(*) as total
    FROM courses c
    JOIN user_courses uc ON uc.course_id = c.id AND uc.user_id = $1::int
),
latest_progress AS (
    SELECT DISTINCT ON (m.unit_id)
        u.course_id,
        u.id as unit_id,
        u.created_at as unit_created_at,
        u.updated_at as unit_updated_at,
        u.unit_number,
        u.name as unit_name,
        u.description as unit_description,
        m.id as module_id,
        m.created_at as module_created_at,
        m.updated_at as module_updated_at,
        m.module_number,
        m.name as module_name,
        m.description as module_description,
        ump.progress as module_progress,
        ump.status as module_status
    FROM units u
    LEFT JOIN modules m ON m.unit_id = u.id
    LEFT JOIN user_module_progress ump ON ump.module_id = m.id AND ump.user_id = $1::int
    ORDER BY m.unit_id, ump.updated_at DESC NULLS LAST
),
enrolled_courses AS (
    SELECT 
        c.id, c.created_at, c.updated_at, c.draft, c.name, c.description, c.requirements, c.what_you_learn, c.background_color, c.icon_url, c.duration, c.difficulty_level, c.rating,
        uc.progress as course_progress,
        (SELECT total FROM enrolled_count) as total_count,
        lp.unit_id,
        lp.unit_created_at,
        lp.unit_updated_at,
        lp.unit_number,
        lp.unit_name,
        lp.unit_description,
        lp.module_id,
        lp.module_created_at,
        lp.module_updated_at,
        lp.module_number,
        lp.module_name,
        lp.module_description,
        lp.module_progress,
        lp.module_status
    FROM courses c
    JOIN user_courses uc ON uc.course_id = c.id AND uc.user_id = $1::int
    LEFT JOIN latest_progress lp ON lp.course_id = c.id
    ORDER BY c.created_at DESC
    LIMIT $3::int
    OFFSET $2::int
)
SELECT
    c.id,
    c.created_at,
    c.updated_at,
    c.name,
    c.description,
    c.requirements,
    c.what_you_learn,
    c.background_color,
    c.icon_url,
    c.duration,
    c.difficulty_level,
    c.rating,
    COALESCE(c.unit_id, 0) as current_unit_id,
    COALESCE(c.unit_created_at, NOW()) as unit_created_at,
    COALESCE(c.unit_updated_at, NOW()) as unit_updated_at,
    COALESCE(c.unit_number, 0) as unit_number,
    COALESCE(c.unit_name, '') as unit_name,
    COALESCE(c.unit_description, '') as unit_description,
    COALESCE(c.module_id, 0) as current_module_id,
    COALESCE(c.module_created_at, NOW()) as module_created_at,
    COALESCE(c.module_updated_at, NOW()) as module_updated_at,
    COALESCE(c.module_number, 0) as module_number,
    COALESCE(c.unit_id, 0) as module_unit_id,
    COALESCE(c.module_name, '') as module_name,
    COALESCE(c.module_description, '') as module_description,
    COALESCE(c.module_progress, 0) as module_progress,
    COALESCE(c.module_status, 'uninitiated') as module_status,
    c.course_progress,
    c.total_count
FROM enrolled_courses c
`

type GetEnrolledCoursesWithProgressParams struct {
	UserID     int32 `json:"userId"`
	PageOffset int32 `json:"pageOffset"`
	PageLimit  int32 `json:"pageLimit"`
}

type GetEnrolledCoursesWithProgressRow struct {
	ID                int32                `json:"id"`
	CreatedAt         time.Time            `json:"createdAt"`
	UpdatedAt         time.Time            `json:"updatedAt"`
	Name              string               `json:"name"`
	Description       string               `json:"description"`
	Requirements      sql.NullString       `json:"requirements"`
	WhatYouLearn      sql.NullString       `json:"whatYouLearn"`
	BackgroundColor   sql.NullString       `json:"backgroundColor"`
	IconUrl           sql.NullString       `json:"iconUrl"`
	Duration          sql.NullInt32        `json:"duration"`
	DifficultyLevel   NullDifficultyLevel  `json:"difficultyLevel"`
	Rating            sql.NullFloat64      `json:"rating"`
	CurrentUnitID     int32                `json:"currentUnitId"`
	UnitCreatedAt     sql.NullTime         `json:"unitCreatedAt"`
	UnitUpdatedAt     sql.NullTime         `json:"unitUpdatedAt"`
	UnitNumber        int32                `json:"unitNumber"`
	UnitName          string               `json:"unitName"`
	UnitDescription   string               `json:"unitDescription"`
	CurrentModuleID   int32                `json:"currentModuleId"`
	ModuleCreatedAt   sql.NullTime         `json:"moduleCreatedAt"`
	ModuleUpdatedAt   sql.NullTime         `json:"moduleUpdatedAt"`
	ModuleNumber      int32                `json:"moduleNumber"`
	ModuleUnitID      int32                `json:"moduleUnitId"`
	ModuleName        string               `json:"moduleName"`
	ModuleDescription string               `json:"moduleDescription"`
	ModuleProgress    float64              `json:"moduleProgress"`
	ModuleStatus      ModuleProgressStatus `json:"moduleStatus"`
	CourseProgress    float64              `json:"courseProgress"`
	TotalCount        int64                `json:"totalCount"`
}

func (q *Queries) GetEnrolledCoursesWithProgress(ctx context.Context, arg GetEnrolledCoursesWithProgressParams) ([]GetEnrolledCoursesWithProgressRow, error) {
	rows, err := q.db.QueryContext(ctx, getEnrolledCoursesWithProgress, arg.UserID, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEnrolledCoursesWithProgressRow{}
	for rows.Next() {
		var i GetEnrolledCoursesWithProgressRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Requirements,
			&i.WhatYouLearn,
			&i.BackgroundColor,
			&i.IconUrl,
			&i.Duration,
			&i.DifficultyLevel,
			&i.Rating,
			&i.CurrentUnitID,
			&i.UnitCreatedAt,
			&i.UnitUpdatedAt,
			&i.UnitNumber,
			&i.UnitName,
			&i.UnitDescription,
			&i.CurrentModuleID,
			&i.ModuleCreatedAt,
			&i.ModuleUpdatedAt,
			&i.ModuleNumber,
			&i.ModuleUnitID,
			&i.ModuleName,
			&i.ModuleDescription,
			&i.ModuleProgress,
			&i.ModuleStatus,
			&i.CourseProgress,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFirstUnitAndModuleInCourse = `-- name: GetFirstUnitAndModuleInCourse :one
SELECT 
    u.id as unit_id,
    m.id as module_id
FROM units u
JOIN modules m ON m.unit_id = u.id
WHERE u.course_id = $1::int
ORDER BY u.unit_number ASC, m.module_number ASC
LIMIT 1
`

type GetFirstUnitAndModuleInCourseRow struct {
	UnitID   int32 `json:"unitId"`
	ModuleID int32 `json:"moduleId"`
}

func (q *Queries) GetFirstUnitAndModuleInCourse(ctx context.Context, courseID int32) (GetFirstUnitAndModuleInCourseRow, error) {
	row := q.db.QueryRowContext(ctx, getFirstUnitAndModuleInCourse, courseID)
	var i GetFirstUnitAndModuleInCourseRow
	err := row.Scan(&i.UnitID, &i.ModuleID)
	return i, err
}

const getMarkdownSection = `-- name: GetMarkdownSection :one
SELECT markdown
FROM markdown_sections
WHERE section_id = $1::int
`

func (q *Queries) GetMarkdownSection(ctx context.Context, sectionID int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getMarkdownSection, sectionID)
	var markdown string
	err := row.Scan(&markdown)
	return markdown, err
}

const getModuleProgressByUnit = `-- name: GetModuleProgressByUnit :many
SELECT m.id, m.created_at, m.updated_at, m.module_number, m.unit_id, m.name, m.description, ump.progress, ump.status
FROM
    modules m
    LEFT JOIN user_module_progress ump ON ump.module_id = m.id
    AND ump.user_id = $1::int
WHERE
    m.unit_id = $2::int
ORDER BY m.module_number
`

type GetModuleProgressByUnitParams struct {
	UserID int32 `json:"userId"`
	UnitID int32 `json:"unitId"`
}

type GetModuleProgressByUnitRow struct {
	ID           int32                    `json:"id"`
	CreatedAt    time.Time                `json:"createdAt"`
	UpdatedAt    time.Time                `json:"updatedAt"`
	ModuleNumber int32                    `json:"moduleNumber"`
	UnitID       int32                    `json:"unitId"`
	Name         string                   `json:"name"`
	Description  string                   `json:"description"`
	Progress     sql.NullFloat64          `json:"progress"`
	Status       NullModuleProgressStatus `json:"status"`
}

func (q *Queries) GetModuleProgressByUnit(ctx context.Context, arg GetModuleProgressByUnitParams) ([]GetModuleProgressByUnitRow, error) {
	rows, err := q.db.QueryContext(ctx, getModuleProgressByUnit, arg.UserID, arg.UnitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetModuleProgressByUnitRow{}
	for rows.Next() {
		var i GetModuleProgressByUnitRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ModuleNumber,
			&i.UnitID,
			&i.Name,
			&i.Description,
			&i.Progress,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getModuleSectionsWithProgress = `-- name: GetModuleSectionsWithProgress :many
SELECT 
    s.id, 
    s.created_at, 
    s.updated_at, 
    s.type, 
    s.position, 
    s.module_id, 
    usp.seen_at, 
    usp.started_at, 
    usp.completed_at, 
    usp.has_seen
FROM
    sections s
    LEFT JOIN user_section_progress usp ON usp.section_id = s.id
    AND usp.user_id = $1::int
WHERE
    s.module_id = $2::int
ORDER BY s.position
`

type GetModuleSectionsWithProgressParams struct {
	UserID   int32 `json:"userId"`
	ModuleID int32 `json:"moduleId"`
}

type GetModuleSectionsWithProgressRow struct {
	ID          int32        `json:"id"`
	CreatedAt   time.Time    `json:"createdAt"`
	UpdatedAt   time.Time    `json:"updatedAt"`
	Type        string       `json:"type"`
	Position    int32        `json:"position"`
	ModuleID    int32        `json:"moduleId"`
	SeenAt      sql.NullTime `json:"seenAt"`
	StartedAt   sql.NullTime `json:"startedAt"`
	CompletedAt sql.NullTime `json:"completedAt"`
	HasSeen     sql.NullBool `json:"hasSeen"`
}

func (q *Queries) GetModuleSectionsWithProgress(ctx context.Context, arg GetModuleSectionsWithProgressParams) ([]GetModuleSectionsWithProgressRow, error) {
	rows, err := q.db.QueryContext(ctx, getModuleSectionsWithProgress, arg.UserID, arg.ModuleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetModuleSectionsWithProgressRow{}
	for rows.Next() {
		var i GetModuleSectionsWithProgressRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Position,
			&i.ModuleID,
			&i.SeenAt,
			&i.StartedAt,
			&i.CompletedAt,
			&i.HasSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestionSection = `-- name: GetQuestionSection :one
SELECT 
    q.id,
    q.question,
    q.type,
    COALESCE(
        json_agg(
            json_build_object(
                'id', qo.id,
                'content', qo.content,
                'is_correct', qo.is_correct
            ) ORDER BY qo.id
        ),
        '[]'::json
    ) as question_options
FROM question_sections qs
JOIN questions q ON q.id = qs.question_id
LEFT JOIN question_options qo ON qo.question_id = q.id
WHERE qs.section_id = $1::int
GROUP BY q.id, q.question, q.type
`

type GetQuestionSectionRow struct {
	ID              int32       `json:"id"`
	Question        string      `json:"question"`
	Type            string      `json:"type"`
	QuestionOptions interface{} `json:"questionOptions"`
}

func (q *Queries) GetQuestionSection(ctx context.Context, sectionID int32) (GetQuestionSectionRow, error) {
	row := q.db.QueryRowContext(ctx, getQuestionSection, sectionID)
	var i GetQuestionSectionRow
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.Type,
		&i.QuestionOptions,
	)
	return i, err
}

const getSectionContent = `-- name: GetSectionContent :one
SELECT 
    CASE s.type
        WHEN 'text' THEN (
            SELECT jsonb_build_object('text', text_content)
            FROM text_sections
            WHERE section_id = s.id
        )
        WHEN 'video' THEN (
            SELECT jsonb_build_object('url', url)
            FROM video_sections
            WHERE section_id = s.id
        )
        WHEN 'question' THEN (
            SELECT jsonb_build_object(
                'id', q.id,
                'question', q.question,
                'type', q.type,
                'options', (
                    SELECT jsonb_agg(jsonb_build_object(
                        'id', qo.id,
                        'content', qo.content,
                        'isCorrect', qo.is_correct
                    ))
                    FROM question_options qo
                    WHERE qo.question_id = q.id
                )
            )
            FROM question_sections qs
            JOIN questions q ON q.id = qs.question_id
            WHERE qs.section_id = s.id
        )
    END as content
FROM sections s
WHERE s.id = $1::int
`

func (q *Queries) GetSectionContent(ctx context.Context, sectionID int32) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getSectionContent, sectionID)
	var content interface{}
	err := row.Scan(&content)
	return content, err
}

const getTextSection = `-- name: GetTextSection :one
SELECT text_content
FROM text_sections
WHERE section_id = $1::int
`

func (q *Queries) GetTextSection(ctx context.Context, sectionID int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getTextSection, sectionID)
	var text_content string
	err := row.Scan(&text_content)
	return text_content, err
}

const getUnitModules = `-- name: GetUnitModules :many
SELECT
    id,
    created_at,
    updated_at,
    module_number,
    unit_id,
    name,
    description
FROM modules
WHERE
    unit_id = $1::int
ORDER BY module_number
`

type GetUnitModulesRow struct {
	ID           int32     `json:"id"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
	ModuleNumber int32     `json:"moduleNumber"`
	UnitID       int32     `json:"unitId"`
	Name         string    `json:"name"`
	Description  string    `json:"description"`
}

func (q *Queries) GetUnitModules(ctx context.Context, unitID int32) ([]GetUnitModulesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnitModules, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUnitModulesRow{}
	for rows.Next() {
		var i GetUnitModulesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ModuleNumber,
			&i.UnitID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoSection = `-- name: GetVideoSection :one
SELECT 
    url as url
FROM video_sections
WHERE section_id = $1::int
`

func (q *Queries) GetVideoSection(ctx context.Context, sectionID int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getVideoSection, sectionID)
	var url string
	err := row.Scan(&url)
	return url, err
}

const initializeModuleProgress = `-- name: InitializeModuleProgress :exec
INSERT INTO user_module_progress
    (user_id, module_id, progress, status)
VALUES 
    ($1::int, $2::int, 0, 'uninitiated'::module_progress_status)
ON CONFLICT (user_id, module_id) DO NOTHING
`

type InitializeModuleProgressParams struct {
	UserID   int32 `json:"userId"`
	ModuleID int32 `json:"moduleId"`
}

func (q *Queries) InitializeModuleProgress(ctx context.Context, arg InitializeModuleProgressParams) error {
	_, err := q.db.ExecContext(ctx, initializeModuleProgress, arg.UserID, arg.ModuleID)
	return err
}

const insertCourseAuthor = `-- name: InsertCourseAuthor :exec
INSERT INTO course_authors (course_id, user_id)
VALUES ($1::int, $2::int)
`

type InsertCourseAuthorParams struct {
	CourseID int32 `json:"courseId"`
	UserID   int32 `json:"userId"`
}

func (q *Queries) InsertCourseAuthor(ctx context.Context, arg InsertCourseAuthorParams) error {
	_, err := q.db.ExecContext(ctx, insertCourseAuthor, arg.CourseID, arg.UserID)
	return err
}

const publishCourse = `-- name: PublishCourse :exec
UPDATE courses
SET draft = FALSE
WHERE id = $1::int
`

func (q *Queries) PublishCourse(ctx context.Context, courseID int32) error {
	_, err := q.db.ExecContext(ctx, publishCourse, courseID)
	return err
}

const searchCourses = `-- name: SearchCourses :many
SELECT
    c.id,
    c.created_at,
    c.updated_at,
    c.name,
    c.description,
    c.requirements,
    c.what_you_learn,
    c.background_color,
    c.icon_url,
    c.duration,
    c.difficulty_level,
    c.rating,
    COUNT(*) OVER() as total_count
FROM courses c
WHERE 
    (LOWER(c.name) LIKE LOWER($1::text) OR
     LOWER(c.description) LIKE LOWER($1::text) OR
     EXISTS (
        SELECT 1 FROM course_tags ct
        JOIN tags t ON t.id = ct.tag_id
        WHERE ct.course_id = c.id AND LOWER(t.name) LIKE LOWER($1::text)
    ))
ORDER BY 
    CASE 
        WHEN LOWER(c.name) LIKE LOWER($1::text) THEN 1
        WHEN LOWER(c.description) LIKE LOWER($1::text) THEN 2
        ELSE 3
    END,
    c.created_at DESC
LIMIT $3::int
OFFSET $2::int
`

type SearchCoursesParams struct {
	SearchQuery string `json:"searchQuery"`
	PageOffset  int32  `json:"pageOffset"`
	PageLimit   int32  `json:"pageLimit"`
}

type SearchCoursesRow struct {
	ID              int32               `json:"id"`
	CreatedAt       time.Time           `json:"createdAt"`
	UpdatedAt       time.Time           `json:"updatedAt"`
	Name            string              `json:"name"`
	Description     string              `json:"description"`
	Requirements    sql.NullString      `json:"requirements"`
	WhatYouLearn    sql.NullString      `json:"whatYouLearn"`
	BackgroundColor sql.NullString      `json:"backgroundColor"`
	IconUrl         sql.NullString      `json:"iconUrl"`
	Duration        sql.NullInt32       `json:"duration"`
	DifficultyLevel NullDifficultyLevel `json:"difficultyLevel"`
	Rating          sql.NullFloat64     `json:"rating"`
	TotalCount      int64               `json:"totalCount"`
}

func (q *Queries) SearchCourses(ctx context.Context, arg SearchCoursesParams) ([]SearchCoursesRow, error) {
	rows, err := q.db.QueryContext(ctx, searchCourses, arg.SearchQuery, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchCoursesRow{}
	for rows.Next() {
		var i SearchCoursesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Requirements,
			&i.WhatYouLearn,
			&i.BackgroundColor,
			&i.IconUrl,
			&i.Duration,
			&i.DifficultyLevel,
			&i.Rating,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCoursesFullText = `-- name: SearchCoursesFullText :many
SELECT
    c.id,
    c.created_at,
    c.updated_at,
    c.name,
    c.description,
    c.requirements,
    c.what_you_learn,
    c.background_color,
    c.icon_url,
    c.duration,
    c.difficulty_level,
    c.rating,
    COUNT(*) OVER() as total_count,
    ts_rank(
        setweight(to_tsvector('english', c.name), 'A') ||
        setweight(to_tsvector('english', COALESCE(c.description, '')), 'B') ||
        setweight(to_tsvector('english', COALESCE(c.requirements, '')), 'C') ||
        setweight(to_tsvector('english', COALESCE(c.what_you_learn, '')), 'C'),
        plainto_tsquery('english', $1::text)
    ) as rank
FROM courses c
WHERE 
    to_tsvector('english', c.name) ||
    to_tsvector('english', COALESCE(c.description, '')) ||
    to_tsvector('english', COALESCE(c.requirements, '')) ||
    to_tsvector('english', COALESCE(c.what_you_learn, '')) @@
    plainto_tsquery('english', $1::text)
ORDER BY rank DESC, c.created_at DESC
LIMIT $3::int
OFFSET $2::int
`

type SearchCoursesFullTextParams struct {
	SearchQuery string `json:"searchQuery"`
	PageOffset  int32  `json:"pageOffset"`
	PageLimit   int32  `json:"pageLimit"`
}

type SearchCoursesFullTextRow struct {
	ID              int32               `json:"id"`
	CreatedAt       time.Time           `json:"createdAt"`
	UpdatedAt       time.Time           `json:"updatedAt"`
	Name            string              `json:"name"`
	Description     string              `json:"description"`
	Requirements    sql.NullString      `json:"requirements"`
	WhatYouLearn    sql.NullString      `json:"whatYouLearn"`
	BackgroundColor sql.NullString      `json:"backgroundColor"`
	IconUrl         sql.NullString      `json:"iconUrl"`
	Duration        sql.NullInt32       `json:"duration"`
	DifficultyLevel NullDifficultyLevel `json:"difficultyLevel"`
	Rating          sql.NullFloat64     `json:"rating"`
	TotalCount      int64               `json:"totalCount"`
	Rank            float32             `json:"rank"`
}

func (q *Queries) SearchCoursesFullText(ctx context.Context, arg SearchCoursesFullTextParams) ([]SearchCoursesFullTextRow, error) {
	rows, err := q.db.QueryContext(ctx, searchCoursesFullText, arg.SearchQuery, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchCoursesFullTextRow{}
	for rows.Next() {
		var i SearchCoursesFullTextRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Requirements,
			&i.WhatYouLearn,
			&i.BackgroundColor,
			&i.IconUrl,
			&i.Duration,
			&i.DifficultyLevel,
			&i.Rating,
			&i.TotalCount,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const startCourseUserCourses = `-- name: StartCourseUserCourses :exec
INSERT INTO user_courses 
    (user_id, course_id)
VALUES 
    ($1::int, $2::int)
ON CONFLICT (user_id, course_id) DO NOTHING
`

type StartCourseUserCoursesParams struct {
	UserID   int32 `json:"userId"`
	CourseID int32 `json:"courseId"`
}

func (q *Queries) StartCourseUserCourses(ctx context.Context, arg StartCourseUserCoursesParams) error {
	_, err := q.db.ExecContext(ctx, startCourseUserCourses, arg.UserID, arg.CourseID)
	return err
}

const updateCourse = `-- name: UpdateCourse :exec
UPDATE courses
SET
    name = COALESCE($1::text, name),
    description = COALESCE($2::text, description),
    requirements = COALESCE($3::text, requirements),
    what_you_learn = COALESCE($4::text, what_you_learn),
    background_color = COALESCE($5::text, background_color),
    icon_url = COALESCE($6::text, icon_url),
    duration = COALESCE($7::int, duration),
    difficulty_level = $8::difficulty_level,
    rating = $9::float
WHERE id = $10::int
`

type UpdateCourseParams struct {
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	Requirements    string          `json:"requirements"`
	WhatYouLearn    string          `json:"whatYouLearn"`
	BackgroundColor string          `json:"backgroundColor"`
	IconUrl         string          `json:"iconUrl"`
	Duration        int32           `json:"duration"`
	DifficultyLevel DifficultyLevel `json:"difficultyLevel"`
	Rating          float64         `json:"rating"`
	CourseID        int32           `json:"courseId"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) error {
	_, err := q.db.ExecContext(ctx, updateCourse,
		arg.Name,
		arg.Description,
		arg.Requirements,
		arg.WhatYouLearn,
		arg.BackgroundColor,
		arg.IconUrl,
		arg.Duration,
		arg.DifficultyLevel,
		arg.Rating,
		arg.CourseID,
	)
	return err
}
