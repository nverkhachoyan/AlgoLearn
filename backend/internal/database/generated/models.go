// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package gen

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type DifficultyLevel string

const (
	DifficultyLevelBeginner     DifficultyLevel = "beginner"
	DifficultyLevelIntermediate DifficultyLevel = "intermediate"
	DifficultyLevelAdvanced     DifficultyLevel = "advanced"
	DifficultyLevelExpert       DifficultyLevel = "expert"
)

func (e *DifficultyLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DifficultyLevel(s)
	case string:
		*e = DifficultyLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for DifficultyLevel: %T", src)
	}
	return nil
}

type NullDifficultyLevel struct {
	DifficultyLevel DifficultyLevel `json:"difficultyLevel"`
	Valid           bool            `json:"valid"` // Valid is true if DifficultyLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDifficultyLevel) Scan(value interface{}) error {
	if value == nil {
		ns.DifficultyLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DifficultyLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDifficultyLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DifficultyLevel), nil
}

type ModuleProgressStatus string

const (
	ModuleProgressStatusUninitiated ModuleProgressStatus = "uninitiated"
	ModuleProgressStatusInProgress  ModuleProgressStatus = "in_progress"
	ModuleProgressStatusCompleted   ModuleProgressStatus = "completed"
	ModuleProgressStatusAbandoned   ModuleProgressStatus = "abandoned"
)

func (e *ModuleProgressStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ModuleProgressStatus(s)
	case string:
		*e = ModuleProgressStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ModuleProgressStatus: %T", src)
	}
	return nil
}

type NullModuleProgressStatus struct {
	ModuleProgressStatus ModuleProgressStatus `json:"moduleProgressStatus"`
	Valid                bool                 `json:"valid"` // Valid is true if ModuleProgressStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullModuleProgressStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ModuleProgressStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ModuleProgressStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullModuleProgressStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ModuleProgressStatus), nil
}

type SectionType string

const (
	SectionTypeMarkdown SectionType = "markdown"
	SectionTypeCode     SectionType = "code"
	SectionTypeQuestion SectionType = "question"
	SectionTypeVideo    SectionType = "video"
)

func (e *SectionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SectionType(s)
	case string:
		*e = SectionType(s)
	default:
		return fmt.Errorf("unsupported scan type for SectionType: %T", src)
	}
	return nil
}

type NullSectionType struct {
	SectionType SectionType `json:"sectionType"`
	Valid       bool        `json:"valid"` // Valid is true if SectionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSectionType) Scan(value interface{}) error {
	if value == nil {
		ns.SectionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SectionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSectionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SectionType), nil
}

type UserRole string

const (
	UserRoleAdmin      UserRole = "admin"
	UserRoleInstructor UserRole = "instructor"
	UserRoleStudent    UserRole = "student"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"userRole"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Achievement struct {
	ID          int32     `json:"id"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
	Draft       bool      `json:"draft"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Points      int32     `json:"points"`
}

type CodeSection struct {
	SectionID int32          `json:"sectionId"`
	Code      string         `json:"code"`
	Language  sql.NullString `json:"language"`
}

type Course struct {
	ID              int32               `json:"id"`
	CreatedAt       time.Time           `json:"createdAt"`
	UpdatedAt       time.Time           `json:"updatedAt"`
	Draft           bool                `json:"draft"`
	Name            string              `json:"name"`
	Description     string              `json:"description"`
	Requirements    sql.NullString      `json:"requirements"`
	WhatYouLearn    sql.NullString      `json:"whatYouLearn"`
	BackgroundColor sql.NullString      `json:"backgroundColor"`
	IconUrl         sql.NullString      `json:"iconUrl"`
	Duration        sql.NullInt32       `json:"duration"`
	DifficultyLevel NullDifficultyLevel `json:"difficultyLevel"`
	Rating          sql.NullFloat64     `json:"rating"`
}

type CourseAuthor struct {
	CourseID int32 `json:"courseId"`
	UserID   int32 `json:"userId"`
}

type CourseTag struct {
	CourseID int32 `json:"courseId"`
	TagID    int32 `json:"tagId"`
}

type ImageSection struct {
	SectionID int32  `json:"sectionId"`
	Url       string `json:"url"`
	Headline  string `json:"headline"`
	Caption   string `json:"caption"`
}

type MarkdownSection struct {
	SectionID int32  `json:"sectionId"`
	Markdown  string `json:"markdown"`
}

type Module struct {
	ID           int32     `json:"id"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
	Draft        bool      `json:"draft"`
	ModuleNumber int32     `json:"moduleNumber"`
	UnitID       int32     `json:"unitId"`
	Name         string    `json:"name"`
	Description  string    `json:"description"`
}

type ModuleQuestion struct {
	ID         int32 `json:"id"`
	ModuleID   int32 `json:"moduleId"`
	QuestionID int32 `json:"questionId"`
	Position   int32 `json:"position"`
}

type Notification struct {
	ID        int32     `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	UserID    int32     `json:"userId"`
	Content   string    `json:"content"`
	Read      bool      `json:"read"`
}

type Question struct {
	ID              int32               `json:"id"`
	CreatedAt       time.Time           `json:"createdAt"`
	UpdatedAt       time.Time           `json:"updatedAt"`
	Type            string              `json:"type"`
	Question        string              `json:"question"`
	DifficultyLevel NullDifficultyLevel `json:"difficultyLevel"`
}

type QuestionOption struct {
	ID         int32  `json:"id"`
	QuestionID int32  `json:"questionId"`
	Content    string `json:"content"`
	IsCorrect  bool   `json:"isCorrect"`
}

type QuestionSection struct {
	SectionID  int32 `json:"sectionId"`
	QuestionID int32 `json:"questionId"`
}

type QuestionTag struct {
	QuestionID int32 `json:"questionId"`
	TagID      int32 `json:"tagId"`
}

type Section struct {
	ID        int32       `json:"id"`
	CreatedAt time.Time   `json:"createdAt"`
	UpdatedAt time.Time   `json:"updatedAt"`
	ModuleID  int32       `json:"moduleId"`
	Type      SectionType `json:"type"`
	Position  int32       `json:"position"`
}

type Streak struct {
	ID            int32        `json:"id"`
	CreatedAt     time.Time    `json:"createdAt"`
	UpdatedAt     time.Time    `json:"updatedAt"`
	UserID        int32        `json:"userId"`
	StartDate     time.Time    `json:"startDate"`
	EndDate       sql.NullTime `json:"endDate"`
	CurrentStreak int32        `json:"currentStreak"`
	LongestStreak int32        `json:"longestStreak"`
}

type Tag struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type Unit struct {
	ID          int32     `json:"id"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
	Draft       bool      `json:"draft"`
	UnitNumber  int32     `json:"unitNumber"`
	CourseID    int32     `json:"courseId"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

type User struct {
	ID                int32          `json:"id"`
	CreatedAt         time.Time      `json:"createdAt"`
	UpdatedAt         time.Time      `json:"updatedAt"`
	Username          string         `json:"username"`
	Email             string         `json:"email"`
	OauthID           sql.NullString `json:"oauthId"`
	Role              UserRole       `json:"role"`
	PasswordHash      string         `json:"passwordHash"`
	FirstName         sql.NullString `json:"firstName"`
	LastName          sql.NullString `json:"lastName"`
	ProfilePictureUrl sql.NullString `json:"profilePictureUrl"`
	LastLoginAt       sql.NullTime   `json:"lastLoginAt"`
	IsActive          bool           `json:"isActive"`
	IsEmailVerified   bool           `json:"isEmailVerified"`
	Bio               sql.NullString `json:"bio"`
	Location          sql.NullString `json:"location"`
	Cpus              int32          `json:"cpus"`
	Streak            int32          `json:"streak"`
	LastStreakDate    sql.NullTime   `json:"lastStreakDate"`
}

type UserAchievement struct {
	ID            int32     `json:"id"`
	CreatedAt     time.Time `json:"createdAt"`
	UpdatedAt     time.Time `json:"updatedAt"`
	UserID        int32     `json:"userId"`
	AchievementID int32     `json:"achievementId"`
	AchievedAt    time.Time `json:"achievedAt"`
}

type UserCourse struct {
	ID               int32         `json:"id"`
	CreatedAt        time.Time     `json:"createdAt"`
	UpdatedAt        time.Time     `json:"updatedAt"`
	UserID           int32         `json:"userId"`
	CourseID         int32         `json:"courseId"`
	Progress         float64       `json:"progress"`
	FurthestModuleID sql.NullInt32 `json:"furthestModuleId"`
}

type UserModuleProgress struct {
	ID                   int32                `json:"id"`
	CreatedAt            time.Time            `json:"createdAt"`
	UpdatedAt            time.Time            `json:"updatedAt"`
	UserID               int32                `json:"userId"`
	ModuleID             int32                `json:"moduleId"`
	StartedAt            time.Time            `json:"startedAt"`
	CompletedAt          sql.NullTime         `json:"completedAt"`
	Progress             float64              `json:"progress"`
	CurrentSectionNumber sql.NullInt32        `json:"currentSectionNumber"`
	LastAccessed         time.Time            `json:"lastAccessed"`
	Status               ModuleProgressStatus `json:"status"`
}

type UserPreference struct {
	UserID   int32  `json:"userId"`
	Theme    string `json:"theme"`
	Language string `json:"language"`
	Timezone string `json:"timezone"`
}

type UserQuestionAnswer struct {
	ID                   int32     `json:"id"`
	CreatedAt            time.Time `json:"createdAt"`
	UpdatedAt            time.Time `json:"updatedAt"`
	UserModuleProgressID int32     `json:"userModuleProgressId"`
	QuestionID           int32     `json:"questionId"`
	OptionID             int32     `json:"optionId"`
	AnsweredAt           time.Time `json:"answeredAt"`
	IsCorrect            bool      `json:"isCorrect"`
	Progress             float64   `json:"progress"`
}

type UserSectionProgress struct {
	ID          int32        `json:"id"`
	UserID      int32        `json:"userId"`
	ModuleID    int32        `json:"moduleId"`
	SectionID   int32        `json:"sectionId"`
	StartedAt   time.Time    `json:"startedAt"`
	CompletedAt sql.NullTime `json:"completedAt"`
	HasSeen     bool         `json:"hasSeen"`
	SeenAt      sql.NullTime `json:"seenAt"`
	Progress    float64      `json:"progress"`
}

type VideoSection struct {
	SectionID int32  `json:"sectionId"`
	Url       string `json:"url"`
}
