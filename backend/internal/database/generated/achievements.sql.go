// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: achievements.sql

package gen

import (
	"context"
)

const createAchievement = `-- name: CreateAchievement :one
INSERT INTO
    achievements (name, description, points)
VALUES ($1, $2, $3) RETURNING id, created_at, updated_at, draft, name, description, points
`

type CreateAchievementParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Points      int32  `json:"points"`
}

func (q *Queries) CreateAchievement(ctx context.Context, arg CreateAchievementParams) (Achievement, error) {
	row := q.db.QueryRowContext(ctx, createAchievement, arg.Name, arg.Description, arg.Points)
	var i Achievement
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Draft,
		&i.Name,
		&i.Description,
		&i.Points,
	)
	return i, err
}

const deleteAchievement = `-- name: DeleteAchievement :exec
DELETE FROM achievements WHERE id = $1
`

func (q *Queries) DeleteAchievement(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAchievement, id)
	return err
}

const getAchievementByID = `-- name: GetAchievementByID :one
SELECT id, created_at, updated_at, draft, name, description, points FROM achievements WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAchievementByID(ctx context.Context, id int32) (Achievement, error) {
	row := q.db.QueryRowContext(ctx, getAchievementByID, id)
	var i Achievement
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Draft,
		&i.Name,
		&i.Description,
		&i.Points,
	)
	return i, err
}

const getAllAchievements = `-- name: GetAllAchievements :many
SELECT id, created_at, updated_at, draft, name, description, points FROM achievements
`

func (q *Queries) GetAllAchievements(ctx context.Context) ([]Achievement, error) {
	rows, err := q.db.QueryContext(ctx, getAllAchievements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Achievement{}
	for rows.Next() {
		var i Achievement
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Draft,
			&i.Name,
			&i.Description,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAchievement = `-- name: UpdateAchievement :one
UPDATE achievements
SET
    name = $1,
    description = $2,
    points = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $4 RETURNING id, created_at, updated_at, draft, name, description, points
`

type UpdateAchievementParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Points      int32  `json:"points"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateAchievement(ctx context.Context, arg UpdateAchievementParams) (Achievement, error) {
	row := q.db.QueryRowContext(ctx, updateAchievement,
		arg.Name,
		arg.Description,
		arg.Points,
		arg.ID,
	)
	var i Achievement
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Draft,
		&i.Name,
		&i.Description,
		&i.Points,
	)
	return i, err
}
